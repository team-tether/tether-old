[gd_resource type="VisualShader" load_steps=6 format=2]

[ext_resource path="res://text.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "aspect_ratio"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// VectorOp:5
	vec3 n_in5p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out5p0 = n_out4p0 * n_in5p1;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out5p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -638.057, 202.714 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 280 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -180, 280 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -1040, 800 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -1240, 480 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -680, 460 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 5, 0, 5, 0, 2, 0 )
